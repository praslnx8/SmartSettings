@startuml

package CORE {

abstract class ContextListener<ContextData> {
    # abstract void startListenForContextChanges((Boolean))
    # abstract void stopListeningToContextChanges()
    + abstract void askListeningPermissionIfAny((boolean))
    + abstract void isListeningPermissionGranterIfAny()
    - void onContextChange((ContextData))
}

interface SettingChanger<ActionData> {
    - ActionData actionData
    + abstract void applySettingChanges()
    + abstract void isApplyPermissionGranterIfAny()
    + abstract void askApplyPermissionIfAny((boolean))
}

abstract class SmartSetting<CriteriaData> {
    - boolean enabled
    - boolean isChangesApplied
    - CriteriaData criteriaData
    - ConjunctionLogic logic
    # Set<ContextListener> listeners
    # Set<SettingChanger> settingChangers
    - void applySettingChanges()
    # abstract void isCriteriaMatching(CriteriaData criteriaData, Set<ContextData> contextData, (boolean))
    + boolean isEnabled()
    + start()
    + stop()
    + boolean isSettingApplied()
}

SmartSetting *-- ContextListener : Composed of >
SmartSetting o-- SettingChanger : Has list of >

class SmartSettingRepository {

    + List<SmartSetting> getSmartSetting()
    + void insertSmartSetting(SmartSetting smartSetting)
    + void deleteSmartSetting(SmartSetting smartSetting)
}

note top of SmartSettingRepository : Perform persisting smartsettings \nmeta informantion to database and \nreconstructing it.

SmartSettingRepository o-- SmartSetting : Recreate/persist >

class SmartProfile <<(S,red) Singleton>> {
    - Set<SmartSetting> smartSettings
    + void enableSmartSetting(SmartSetting smartSetting)
    + void disableSmartSetting(SmartSetting smartSetting)
    + Set<SmartSetting> getSmartSettingsLiveData()
    - void persistSmartSettingToMemory()
    - void reInitializeSmartSettingsFromMemory()
}

SmartProfile o-- SmartSetting : Has Set of >
SmartProfile *-- SmartSettingRepository : Load SmartSetting from db >
}

package CREATE {

class SmartSettingProvider {
    - List<SmartSettingTemplate> smartSettingTemplates;
    + SmartSetting getSmartSetting()
}

SmartSettingProvider o-- SmartSetting : Creates >

class SettingChangersProvider {
    - List<SettingChangerTemplate> settingChangerTemplates;
    + Set<SettingChanger> getSettingChangers()
}

SettingChangersProvider o-- SettingChanger : Creates >

class SmartSettingBuilder {
    - SmartSettingProvider smartSettingProvider
    - SettingChangersProvider settingChangersProvider
    + SmartSetting buildSmartSetting()
}

SmartSettingBuilder *-- SmartSettingProvider
SmartSettingBuilder *-- SettingChangersProvider
SmartSettingBuilder o-- SmartSetting : Builds >

}

package RUNNER {

class MainService <<(S,red) Singleton>> {
    - void runSmartSettings()
}

note top of MainService : Should be invoked \nby Android Service.

MainService - SmartSetting : Runs smart settings >
MainService - SmartProfile : Get List of SmartSetting >
}

package VIEW {
    class SmartSettingView {
        - void showSmartSettings(Set<SmartSetting> smartSettings)
    }

    SmartSettingView o-- SmartProfile : Load SmartSettings >
}

@enduml